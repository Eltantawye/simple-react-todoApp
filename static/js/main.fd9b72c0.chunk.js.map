{"version":3,"sources":["Todos.js","addTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todos","_ref","todos","deleteTodo","todosList","length","map","todo","react_default","a","createElement","className","key","id","onClick","content","AddTodo","state","handleAdd","e","preventDefault","_this","props","addTodo","setState","handleChange","target","value","onSubmit","this","type","placeholder","onChange","style","width","height","background","Component","App","myTodos","filter","Math","random","concat","Object","toConsumableArray","console","log","src_Todos","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAkBeA,EAhBD,SAAAC,GAA0B,IAAxBC,EAAwBD,EAAxBC,MAAQC,EAAgBF,EAAhBE,WAChBC,EAAYF,EAAMG,OACtBH,EAAMI,IAAI,SAACC,GACT,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBAAkBC,IAAML,EAAKM,IAC1CL,EAAAC,EAAAC,cAAA,QAAMI,QAAS,kBAAIX,EAAWI,EAAKM,MAAMN,EAAKQ,YAIjDP,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UAAb,+BACL,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZP,IC4BQY,6MAvCbC,MAAQ,CACNF,QAAQ,MAGVG,UAAU,SAACC,GACTA,EAAEC,iBACCC,EAAKJ,MAAMF,QAAQV,QACtBgB,EAAKC,MAAMC,QAAQF,EAAKJ,OACxBI,EAAKG,SAAS,CACZT,QAAQ,QAKZU,aAAa,SAACN,GACZE,EAAKG,SAAS,CACZT,QAAUI,EAAEO,OAAOC,iFAKrB,OACEnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,QAAMkB,SAAUC,KAAKX,WAEnBV,EAAAC,EAAAC,cAAA,2BAEAF,EAAAC,EAAAC,cAAA,SAAOG,GAAG,OAAOiB,KAAK,OAAOC,YAAY,YAAYC,SAAUH,KAAKJ,aAAcE,MAAOE,KAAKZ,MAAMF,UACpGP,EAAAC,EAAAC,cAAA,OAAMuB,MAAQ,CAACC,MAAQ,OAAQC,OAAQ,EAAIC,WAAW,sBA7B1CC,aCuCPC,6MApCfrB,MAAQ,CACNf,MAAQ,CACN,CAACW,GAAK,EAAIE,QAAU,kBAIxBZ,WAAa,SAACU,GACZ,IAAI0B,EAAUlB,EAAKJ,MAAMf,MAAMsC,OAAO,SAACjC,GAAD,OAAUA,EAAKM,KAAOA,IAC5DQ,EAAKG,SAAS,CACZtB,MAASqC,OAGbhB,QAAU,SAAChB,GACT,IAAIM,EAAK4B,KAAKC,SAChBrB,EAAKG,SAAS,CACZtB,MAAK,GAAAyC,OAAAC,OAAAC,EAAA,EAAAD,CAAOvB,EAAKJ,MAAMf,OAAlB,CAAwB,CAACW,GAAKA,EAAKE,QAAUR,EAAKQ,aAEzD+B,QAAQC,IAAI1B,EAAKJ,MAAMf,gFAGnB,OACEM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,oBAAd,SACAH,EAAAC,EAAAC,cAACa,EAAD,CAASA,QAASM,KAAKN,UACvBf,EAAAC,EAAAC,cAACsC,EAAD,CAAO9C,MAAO2B,KAAKZ,MAAMf,MAAQC,WAAY0B,KAAK1B,qBA1BxCkC,aCSEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.fd9b72c0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Todos = ({todos , deleteTodo}) => {\r\n  const todosList = todos.length ? (\r\n    todos.map((todo) => {\r\n      return(\r\n        <div className=\"collection-item\" key ={todo.id}>\r\n          <span onClick={()=>deleteTodo(todo.id)}>{todo.content}</span>\r\n        </div>\r\n      )\r\n    })\r\n  ) : (<p className=\"center\"> You Dont have and Todos !!</p>);\r\n  return(\r\n    <div className=\"todos collection\">\r\n      {todosList}\r\n    </div>\r\n  );\r\n}\r\nexport default Todos\r\n","import React ,{Component} from 'react'\r\n\r\nclass AddTodo extends Component{\r\n  state = {\r\n    content:''\r\n  }\r\n  /*send the content to main app Component */\r\n  handleAdd=(e)=>{\r\n    e.preventDefault();\r\n    if(this.state.content.length)\r\n    this.props.addTodo(this.state);\r\n    this.setState({\r\n      content:''\r\n    })\r\n  }\r\n\r\n  /* set the input into comonent's state */\r\n  handleChange=(e)=>{\r\n    this.setState({\r\n      content : e.target.value\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div className=\"stripped\">\r\n        <form onSubmit={this.handleAdd}>\r\n\r\n          <label> Add Todo </label>\r\n          {/* Setting the value to the new content which is empty */}\r\n          <input id=\"name\" type=\"text\" placeholder=\"your Todo\" onChange={this.handleChange} value={this.state.content}/>\r\n          <div  style ={{width : '100%' ,height :2 , background:'#d7ccc8'}}></div>\r\n        </form>\r\n      </div>\r\n    );\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\nexport default AddTodo\r\n","import React, { Component } from 'react';\nimport Todos from './Todos'\nimport AddTodo from './addTodo'\nclass App extends Component {\n\nstate = {\n  todos : [\n    {id : 1 , content : \"Dummy Todo\"}\n\n  ]\n}\ndeleteTodo = (id) => {\n  let myTodos = this.state.todos.filter((todo) => todo.id !== id);\n  this.setState({\n    todos :  myTodos\n  })\n}\naddTodo = (todo) => {\n  let id = Math.random();\nthis.setState({\n  todos : [...this.state.todos,{id : id , content : todo.content}]\n});\nconsole.log(this.state.todos);\n}\n  render() {\n    return (\n      <div className=\"todos-app container \" >\n        <h1 className=\"center blue-text\">Todos</h1>\n        <AddTodo addTodo={this.addTodo} />\n        <Todos todos={this.state.todos}  deleteTodo={this.deleteTodo}/>\n      </div>\n    );\n  }\n}\n/*\n<input type = \"text\" name = \"name\" onChange = {this.handleSt}/>\n<button onClick={this.handleClick}> Clickme </button>\n<Header name=\"mohamed\" />\n<Content name =\"ahmed\" />\n<Footer name = \"koko\" />*/\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}